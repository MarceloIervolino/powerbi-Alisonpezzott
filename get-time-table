let
    // Define the language.
    // Options: en-US (default),  pt-BR, es-ES, hi-IN, fr-FR, de-DE
    Culture = "en-US",
    PeriodsNamesInput = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("VY89EgIhDIXvQr0cAmfXTgt/qp0t4pIFCsIOwnggLWw9AxeTsDZWecl8eXkZR4Ekr2fRiR4eVMshRHJkqlJLwkgh8PTojE1i6kaxJrk7MQc6ZgMamiZbnlVcIGpkPLiEDce7HNhdeSCcMTa6fIDgD5/thi9R7tld5Rs2NDk+r9ZY3nfpnXaMZ7dl0Sj7gaOXl/cYc4tdHzDYMsNsvUsJzK+pS9MX", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Culture = _t, Dawn = _t, Morning = _t, Afternoon = _t, Night = _t]),
    PeriodsTb = Table.RemoveColumns ( Table.SelectRows ( PeriodsNamesInput, each [Culture] = Culture ), "Culture" ),
    ColumnNamesTbInput = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("lZFNTsMwEIWvYmXdSBUb1jQpAqFIUQObhi7ceNpYij2VY0PhDhyCFWTBDdj5Ythpfpes5vnZns9+k+cByPApCxbBvWRwdvWRCyAP8OZkpqnSBA8k4dJomDp3aJRbd2XchwIlcyIFxdGLm4SkSbBb5MFJh6uNc+yHZLyA9rayn+4ciUr64o0IBdgvJAyJ8C1x6lFSoqKXa7SHYgs9GsnwQrU/2MqRC3W4zmbcqHI4woBoDuLUQTjId0eBaoYe3eHsP/EHFd5uLvn2dNvUrsa22RvtnyH6+EarejbL5dV1CUa1SXV1CDoGc+b2W3id2saHDTMsgzBeT8a6Ba7roqzsb11DNbQiezhyKUG2w3X/ALJqnWE9pW5fXRfouilqxIjc/QE=", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Culture = _t, Index = _t, #"Time Key" = _t, #"Start of Minute" = _t, #"Start of Hour" = _t, Hour = _t, Minute = _t, Second = _t, Period = _t, #"AM PM" = _t]),
    ColumnNamesTb = Table.RemoveColumns (
        Table.SelectRows ( ColumnNamesTbInput, each [Culture] = Culture ),
        "Culture"
    ),
    DawnName = PeriodsTb[Dawn]{0},
    MorningName = PeriodsTb[Morning]{0},
    AfternoomName = PeriodsTb[Afternoon]{0},
    NightName = PeriodsTb[Night]{0},
    ZeroWidthSpace = Character.FromNumber ( 8203 ),
    AddIndex = Table.FromList ( 
        {0..86399}, 
        Splitter.SplitByNothing(), 
        type table [ Index = Int64.Type ] 
    ),
    AddTimeKey = Table.AddColumn ( 
        AddIndex, 
        "Time Key", 
        each 
            let 
                duration = #duration ( 0, 0, 0, [Index] ),
                hours = Duration.Hours ( duration ),
                minutes =Duration.Minutes ( duration ),
                seconds = Duration.Seconds ( duration ) in
                #time ( hours, minutes, seconds ),
        type time
    ),
    AddStartOfMinute = Table.AddColumn ( 
        AddTimeKey, 
        "Start of Minute", 
        each #time ( Time.Hour ( [Time Key ] ), Time.Minute ( [Time Key] ) , 0 ), 
        type time 
    ),
    AddStartOfHour = Table.AddColumn ( 
        AddStartOfMinute, 
        "Start of Hour", 
        each Time.StartOfHour ( [Time Key] ), 
        type time 
    ),
    AddHour = Table.AddColumn ( 
        AddStartOfHour, 
        "Hour", 
        each Time.Hour ( [Time Key] ), 
        Int64.Type 
    ),
    AddMinute = Table.AddColumn ( 
        AddHour, 
        "Minute", 
        each Time.Minute ( [Time Key] ),  
        Int64.Type 
    ),
    AddSecond = Table.AddColumn ( 
        AddMinute, 
        "Second", 
        each Time.Second ( [Time Key] ), 
        Int64.Type 
    ),
    AddPeriod = Table.AddColumn ( 
        AddSecond, 
        "Period", 
        each if [Hour] < 6 then Text.Repeat(ZeroWidthSpace,4) & DawnName 
            else if [Hour] < 12 then Text.Repeat(ZeroWidthSpace,3) & MorningName 
            else if [Hour] < 18 then Text.Repeat(ZeroWidthSpace,2) & AfternoomName 
            else ZeroWidthSpace & NightName, 
        type text 
    ),
    AddAmPm = Table.AddColumn ( AddPeriod, "AM PM", each if [Hour] < 12 then "AM" else "PM", type text ),
    ReorderedColumns = Table.ReorderColumns(
        AddAmPm,
        {
            "Index", 
            "Time Key", 
            "Start of Minute", 
            "Start of Hour", 
            "Hour", 
            "Minute", 
            "Second", 
            "Period",
            "AM PM"
        }
    ),
    ListToRename = Table.AddColumn (
        Table.UnpivotOtherColumns ( ColumnNamesTb, {}, "From", "To" ),
        "FromTo",
        each Record.FieldValues ( _ )
    )[FromTo],
    RenamedColumns = Table.RenameColumns ( ReorderedColumns, ListToRename )
in
    RenamedColumns

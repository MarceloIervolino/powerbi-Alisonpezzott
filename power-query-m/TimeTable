let
     Intro = "=======================================================================================#(lf) Tabela Dimensão Horas Power Query (M) por Alison Pezzott - versão: 1.0.0#(lf)#(lf)Instruções:#(lf)1. Defina o idioma (language). Idiomas disponíveis: en-US, pt-BR, es-ES and fr-FR#(lf)#(lf)Me siga no canal no YouTube e em minha redes sociais!#(lf)  Youtube: https://www.youtube.com/c/alisonpezzott/?sub_confirmation=1#(lf)  Instagram: https://www.instagram.com/alisonpezzott#(lf)  Github: https://github.com/alisonpezzott#(lf)  Linkedin: https://www.linkedin.com/in/alisonpezzott#(lf)#(lf)Se precisar de suporte, por favor me contacte em algum dos canais acima.#(lf)=======================================================================================#(lf)#English#(lf)#(lf)Time Table Power Query (M) by Alison Pezzott - version: 1.0.0#(lf)#(lf)Instructions:#(lf)1. Define the language. Available languages: en-US, pt-BR, es-ES and fr-FR#(lf)#(lf)Follow me on my Youtube channel and my social networking!#(lf)  Youtube: https://www.youtube.com/c/alisonpezzott/?sub_confirmation=1#(lf)  Instagram: https://www.instagram.com/alisonpezzott#(lf)  Github: https://github.com/alisonpezzott#(lf)  Linkedin: https://www.linkedin.com/in/alisonpezzott#(lf)#(lf)If you need support, please contact me thru above channels.#(lf)=======================================================================================", 

    #"@PARAMETERS" = null,
    language = "pt-BR",
    _________ = null,
    
    //types
    _i = Int64.Type,
    _t = Text.Type,
    _d = Date.Type,
    _tb = Table.Type,
    _tm = Time.Type,

    //keywords by language
    languagePrefixes = Table.FromRecords (
        {
            [ Language = "en-US", Dawn = "Dawn"     , Morning = "Morning", Afternoon = "Afternoon"  , Night = "Night" ],
            [ Language = "pt-BR", Dawn = "Madrugada", Morning = "Manhã"  , Afternoon = "Tarde"      , Night = "Noite" ],
            [ Language = "es-ES", Dawn = "Amanecer" , Morning = "Mañana" , Afternoon = "Tarde"      , Night = "Noche" ],
            [ Language = "fr-FR", Dawn = "Aube"     , Morning = "Matin"  , Afternoon = "Après-midi" , Night = "Nuit"  ]
        },
        type table [Language =_t, Dawn = _t, Morning = _t, Afternoon = _t, Night = _t ]
    ),
    dawn = Table.SelectRows ( languagePrefixes, each [Language]=language )[Dawn]{0},
    morning = Table.SelectRows ( languagePrefixes, each [Language]=language )[Morning]{0},
    afternoon = Table.SelectRows ( languagePrefixes, each [Language]=language )[Afternoon]{0},
    night = Table.SelectRows ( languagePrefixes, each [Language]=language )[Night]{0},
    zeroWidthSpace = Character.FromNumber ( 8203 ),

    //creating list of time
    AddIndex = Table.FromList ( 
        {0..86399}, 
        Splitter.SplitByNothing(), 
        type table [ Index = Int64.Type ] 
    ),
    AddTimeKey = Table.AddColumn ( 
        AddIndex, 
        "Time Key", 
        each 
            let 
                duration = #duration ( 0, 0, 0, [Index] ),
                hours = Duration.Hours ( duration ),
                minutes = Duration.Minutes ( duration ),
                seconds = Duration.Seconds ( duration ) 
            in
                #time ( hours, minutes, seconds ),
        type time
    ),
    AddCustomColumns = Table.AddColumn (
        AddTimeKey,
        "Custom Columns", 
        each [
            Start of Minute = #time ( Time.Hour ( [Time Key ] ), Time.Minute ( [Time Key] ) , 0 ),
            Start of Hour = Time.StartOfHour ( [Time Key] ),
            Hour = Time.Hour ( [Time Key] ),
            Minute = Time.Minute ( [Time Key] ),
            Second =  Time.Second ( [Time Key] )
        ],
        type [Start of Minute = _tm, Start of Hour = _tm, Hour = _i, Minute = _i, Second = _i ]
    ),
    ExpandedCustomColumns = Table.ExpandRecordColumn(AddCustomColumns, "Custom Columns", {"Start of Minute", "Start of Hour", "Hour", "Minute", "Second"}, {"Start of Minute", "Start of Hour", "Hour", "Minute", "Second"}),

    AddPeriod = Table.AddColumn ( 
        ExpandedCustomColumns, 
        "Period", 
        each     if [Hour] <  6 then Text.Repeat ( zeroWidthSpace, 4 ) & dawn 
            else if [Hour] < 12 then Text.Repeat ( zeroWidthSpace, 3 ) & morning
            else if [Hour] < 18 then Text.Repeat ( zeroWidthSpace, 2 ) & afternoon
            else zeroWidthSpace & night, 
        type text 
    ),
    AddAmPm = Table.AddColumn ( AddPeriod, "AM PM", each if [Hour] < 12 then "AM" else "PM", type text ),

    ReorderedColumns = Table.ReorderColumns ( AddAmPm, { "Index", "Time Key", "Start of Minute", "Start of Hour", "Hour", "Minute", "Second", "Period", "AM PM" } ),

    ColumnNames = Table.ColumnNames ( ReorderedColumns ),

    listColumnsEN = { "Index", "Time Key", "Start of Minute", "Start of Hour", "Hour", "Minute", "Second", "Period", "AM PM" },
    listColumnsPT = { "Índice", "Horário Chave", "Início do minuto", "Início da hora", "Hora", "Minuto", "Segundo", "Período", "AM PM" },
    listColumnsES = { "Índice", "Clave de tiempo", "Comienzo del minuto", "Comienzo del tiempo", "Hora", "Minuto", "Segundo", "Período", "AM PM" },
    listColumnsFR = { "Indice", "Clés", "Début de minute", "Début de l'heure", "Heure", "Minute", "Deuxième", "Période", "AM PM" },
    
    NewColumnNames = 
        let
            listColumnsEN = { "Index", "Time Key", "Start of Minute", "Start of Hour", "Hour", "Minute", "Second", "Period", "AM PM" },
            listColumnsPT = { "Índice", "Horário", "Início do minuto", "Início da hora", "Hora", "Minuto", "Segundo", "Período", "AM PM" },
            listColumnsES = { "Índice", "Tiempo", "Comienzo del minuto", "Comienzo del tiempo", "Hora", "Minuto", "Segundo", "Período", "AM PM" },
            listColumnsFR = { "Indice", "Clés", "Début de minute", "Début de l'heure", "Heure", "Minute", "Deuxième", "Période", "AM PM" }
        in
            if language = "en-US" then listColumnsEN
            else if language = "pt-BR" then listColumnsPT
            else if language = "es-ES" then listColumnsES
            else if language = "fr-FR" then listColumnsFR
            else listColumnsEN,
    
    RenamedColumns = Table.RenameColumns ( ReorderedColumns,  List.Zip ( { ColumnNames, NewColumnNames } ) )
in
    RenamedColumns
